version: "3.9"

volumes:
  php-fpm-socket:
  test-db-store:
  db-store:
  mariadb1132-store:
  backupdb-store:
  psysh-store:
  cache-redis-store:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  typesense-data:
    driver: local

networks:
  my-proxy-net:
    name: custom_network

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2024-01-01T16-36-33Z
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  networks:
    - my-proxy-net
  expose:
    - "9000"
    - "9001"
    # environment:
    # MINIO_ROOT_USER: minioadmin
    # MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  app83:
    build:
      context: .
      dockerfile: ./infra/docker/php83/Dockerfile
      args:
        - USER_NAME=${USER_NAME}
        - USER_ID=${USER_ID}
    environment:
      - USER_NAME=${USER_NAME}
      - USER_ID=${USER_ID}
    volumes:
      - type: volume
        source: php-fpm-socket
        target: /var/run/php-fpm
        volume:
          nocopy: true
      - type: bind
        source: ./backend
        target: /home/${USER_NAME}/ks
      - type: volume
        source: psysh-store
        target: /root/.config/psysh
        volume:
          nocopy: true
      - "./profiling:/home/ubuntu/profiling"
      - "./infra/docker/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini:ro"
    networks:
      - my-proxy-net
    depends_on:
      - web
      - db
      - db-test
      - cache

  web:
    build:
      context: .
      dockerfile: ./infra/docker/nginx/Dockerfile
      args:
        - HTTPS_WEB_PORT=${HTTPS_WEB_PORT}
        - WEB_PORT=${WEB_PORT}
        - USER_NAME=${USER_NAME}
        - USER_ID=${USER_ID}
    container_name: ksweb
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 443
        published: ${HTTPS_WEB_PORT}
        protocol: tcp
        mode: host
      - target: 80
        published: ${WEB_PORT}
        protocol: tcp
        mode: host
      - target: 9000 # minio api
        published: 9100
        protocol: tcp
        mode: host
      - target: 9001 # minio console
        published: 9101
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: php-fpm-socket
        target: /var/run/php-fpm
        volume:
          nocopy: true
      - type: bind
        source: ./backend
        target: /home/${USER_NAME}/ks
      - type: bind
        source: ./infra/docker/nginx/templates
        target: /etc/nginx/templates/
    environment:
      - USER_NAME=${USER_NAME}
      - USER_ID=${USER_ID}
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    networks:
      - my-proxy-net
    depends_on:
      - minio1
      - minio2

  db:
    build:
      context: .
      dockerfile: ./infra/docker/mariadb11/Dockerfile
      args:
        DB_PORT: ${DB_PORT}
        DB_DATABASE: ${DB_NAME}
        DB_USERNAME: ${DB_USERNAME}
        DB_PASSWORD: ${DB_PASSWORD}
        MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - target: ${DB_PORT}
        published: ${EXPOSED_DB_PORT}
        protocol: tcp
        mode: host
    volumes:
      - mariadb1132-store:/var/lib/mysql
      - ./infra/docker/mariadb11/my.cnf:/etc/my.cnf
      - ./infra/docker/mariadb11/mysql-general.log:/var/log/mysql/mysql-general.log
      - ./infra/docker/mariadb11/mysql-slow.log:/var/log/mysql/mysql-slow.log
      - ./infra/docker/mariadb11/mysql-error.log:/var/log/mysql/mysql-error.log
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MARIADB_AUTO_UPGRADE: 1
    networks:
      - my-proxy-net

  db-test:
    build:
      context: .
      dockerfile: ./infra/docker/mariadb11/Dockerfile
      args:
        - TEST_DB_PORT=${TEST_DB_PORT}
        - TEST_DB_DATABASE=${TEST_DB_NAME}
        - TEST_DB_USERNAME=${TEST_DB_USERNAME}
        - TEST_DB_PASSWORD=${TEST_DB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${TEST_DB_PASSWORD}
    ports:
      - target: ${TEST_DB_PORT}
        published: ${EXPOSED_TEST_DB_PORT}
        protocol: tcp
        mode: host
    volumes:
      - ./infra/docker/mariadb11/my.cnf:/etc/my.cnf
    environment:
      - MYSQL_DATABASE=${TEST_DB_NAME}
      - MYSQL_USER=${TEST_DB_USERNAME}
      - MYSQL_PASSWORD=${TEST_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${TEST_DB_PASSWORD}
    networks:
      - my-proxy-net

  cache:
    build:
      context: .
      dockerfile: ./infra/docker/cache/Dockerfile
      args:
        - REDIS_PASS=${REDIS_PASSWORD}
        - REDIS_PORT=${REDIS_PORT}
        - EXPOSED_REDIS_PORT=${EXPOSED_REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    ports:
      - target: ${REDIS_PORT}
        published: ${EXPOSED_REDIS_PORT}
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: cache-redis-store
        target: /data
        volume:
          nocopy: true
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASS=${REDIS_PASSWORD}
    networks:
      - my-proxy-net

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  typesense:
    image: typesense/typesense:0.25.0-arm64
    entrypoint: sh -c "/opt/typesense-server --data-dir /data --api-key=local-typesense-api-key --enable-cors"
    ports:
      - "8108:8108"
    volumes:
      - typesense-data:/data
    networks:
      - my-proxy-net

  mongo:
    image: mongo
    container_name: ksmongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    ports:
      - 27017:27017
    networks:
      - my-proxy-net

  nginx:
    image: nginx:alpine-slim
    ports:
      - "8888:80"
      - "4438:443"
    restart: always
    networks:
      - my-proxy-net
